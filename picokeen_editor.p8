pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
-- picokeen editor ➡️

-- ===================

-- map and camera data

-- ===================

data = nil
#include mapdata.txt

selected_map_id = 1
map_str = "" -- if #include fails...

music_id = 0
name = "lv1"

layer = 1
tiles = {}
tiles_bg = {}
tiles_rot = {}
tiles_bg_rot = {}

tiles_w = 64
tiles_h = 16
tiles_xr = tiles_w * 8
tiles_yr = tiles_h * 8

selected_group = 1
selected_index = 1
scroll_index = 1

level_pals = {}

-- ====================

-- load maps + save em!

-- ====================

function delete_map()
 for i = 1,128 do 
 	 for j = 1,128 do
	  tiles[i][j] = 0
	  tiles_bg[i][j] = 0
	  tiles_rot[i][j] = 0
	  tiles_bg_rot[i][j] = 0
	 end
	end
end

function load_map_to_editor(str)

  -- load from mapdata.txt
 
 to_load = str
 state = 0
 parsed,char,at = "","",0
 i,j = 1,1
 
 rot,num,tile = 0,0,0
 
 -- ===========
 -- co-routines
 -- ===========
 
 -- parse one character.
 function get_char()
 	at += 1
		char = sub(to_load,at,at)
 end
 
 -- parse state at.
 function change_state()
  local _change = state
  if (char == "/") state = 4 -- finish
 	if (char == "*") state = 2 -- num of tiles
 	if (char == "^") state = 1 -- rotation 
 	
 	-- state : 1 or many tiles.
 	
 	if char == "." then 
 		state = 3 -- tile id
 		if (_change == state) return true
 	end
 	
 	return _change != state
 end
 
 -- =======
 -- states.
 -- =======
 
 -- parse ^, rotation value
 
 function parse_rot()
  	get_char()
 	if not change_state() then
 		parsed ..= char
 	else
 	 rot = tonum(parsed)
 	 parsed = ""
 	end
 end
 
 -- parse *, number of tiles.
 
 function parse_num()
  get_char()
 	if not change_state() then
 		parsed ..= char
 	else
 	 num = tonum(parsed)
 	 parsed = ""
 	end
 end
 
 -- parse ., a tile id.
 
 function parse_tile()
 	get_char()
 	if not change_state() then
 		parsed ..= char
 	else
 	
 	 -- insert tiles into scene
 	 
 	 tile = tonum(parsed)
 	 
	  while num > 0 do
	  
	 	 tiles[i][j] = tile
	 	 tiles_rot[i][j] = rot
	 	 i += 1
	 	 if (i > tiles_w)	i = 1 j += 1
	 	 num -= 1

	 	end
	 	
	 	-- reset data.
	 	
	 	num = 1
	 	rot = 0
	 	
	 	parsed = ""
	 		
 	end
 end
 
 -- ==================
 -- state machine loop
 -- ==================
 
 -- set initial state.
 get_char()
 change_state()
 
 -- run the state machine
 while state != 4 do
  if (state == 1) parse_rot()
  if (state == 2) parse_num()
  if (state == 3) parse_tile()
 end

end

-- parser

parser_data = str
parser_at = 1

function parse()
 local _parsed,_index = "",parser_at
 local _chr = ""
 
 while _chr != "/" do
  
  _chr = sub(parser_data,_index,_index)
  _index += 1
  
  if _chr == "/" or _index > #parser_data then
   parser_at = _index
   return _parsed
  else
   _parsed ..= _chr
  end
 end
end

-- ===========================

-- load in a map from txt file

-- ===========================

function load_map(id)
 
 ---------------------------
 -- parse in level headers.
 ---------------------------
 -- name,music,w,h,
 
 parser_data = data[id]
	parser_at = 1
	
	local _missing_data = #parser_data == 0 or parser_data == nil
	
	
	if not _missing_data then
		name = parse()
		music_id = tonum(parse())
	 tiles_w = tonum(parse())
	 tiles_h = tonum(parse())
 else
  name = "untitled"
  music_id = 0
  tiles_w = 128
  tiles_h = 32
 end
 
 tiles_xr = tiles_w * 8
	tiles_yr = tiles_h * 8
 
 -----------------
 -- set up tiles
 -----------------
 
	tiles,tiles_bg,tiles_rot,tiles_bg_rot = {},{},{},{}
	for i = 1,128 do 
		add(tiles,{})
		add(tiles_bg,{})
		add(tiles_rot,{})
		add(tiles_bg_rot,{})
	 for j = 1,128 do
	  add(tiles[i],0)
	  add(tiles_bg[i],0)
	  add(tiles_rot[i],0)
	  add(tiles_bg_rot[i],0)
	 end
	end
	
	-- read the level tile data.
	
	if not _missing_data then
		local _map_str = sub(parser_data,parser_at)
		load_map_to_editor(_map_str)
	end
	
end

-- ====================

-- save up to 10 levels 

-- ====================

function save_maps()

	local _data = "data={"

	------------------------
	-- save current map info
	------------------------
	
	local _str = ""	
	
	
	-- name,music,w,h,
	_str ..= name .. "/" .. music_id .. "/" .. tiles_w .. "/" .. tiles_h .. "/"

	--------------------
	-- read in tile data
	--------------------
	
	local _prev,_count,_prev_rot,_rot = 0,0,0,0
	local _t,_r
	
	for j = 1,tiles_h do
	 for i = 1,tiles_w do
	 	_t = tiles[i][j]
	 	_r = tiles_rot[i][j]
	 	
	 	-- count re-occurences.
	 	if _t == _prev and _r == _prev_rot then
	 		_count += 1
	 	else
	 		
	 		local _rot = _prev_rot == 0 and "" or ("^" .. _prev_rot)
	 		
	 		-- single tile or many tiles.
	 		if _count == 1 then
	 	 	_str ..= _rot .. "." .. tostr(_prev)
	 	 else
	 	 	_str ..= _rot .. "*" .. tostr(_count) .. "." .. tostr(_prev)
	 	 end
	 	 
	 	 _prev = _t
	 	 _prev_rot = _r
	 	 _count = 1
	 	end
	 	
	 end
	end
	
	-- very last tile!
	
	local _rot = _prev_rot == 0 and "" or ("^" .. _prev_rot)
	
	if _count == 1 then
	 	 	_str ..= _rot .. "." .. tostr(_prev)
	else
	 	 	_str ..= _rot .. "*" .. tostr(_count) .. "." .. tostr(_prev)
	end
	
	-- save to mapdata.txt
	
	_str ..= "/"

 --------------------------
	-- concat with other maps
	-------------------------

	for i = 1,10 do
		
		_data ..= "'"
		if i == selected_map_id then
		 _data ..= _str
		else
		 _data ..= data[i]
		end
		_data ..= "'"
		if (i != 10) _data ..= ","
		
	end

	_data ..= "}"	
	
	printh(_data,"mapdata.txt",true,false)
	

end

-->8
-- in editor map ★

mb_any = 0
mb_left,mb_right = false,false
bm_left_held,mb_right_held = false,false
cy,cx = 0,0
ci,cj = 1,1

ui_border = 9

rotate = 0
rotate_flicker = false
rotate_flicker_timer = 30

delete_timer_max = 150
delete_timer = delete_timer_max

editor_enabled = true

-- gems

gpal = {14,8,2}
gpals = {{11,3,1},{10,9,4},{12,13,1}}

function gem_pal(id)
 for i = 1,3 do pal(gpal[i],gpals[id][i]) end
end

function update_editor()
 
 -- handle mouse & camera bounds
 
 camera(cx,cy)
	
	ci = to_i(cx)
	cj = to_j(cy)
 
 local _mb_wheel = stat(36)
 
 -- ==========================
 
 -- tile operations!
 
	-- ==========================
 
 local _t = get_selected()
 
 -- fx
 
 rotate_flicker_timer -= 1
 if rotate_flicker_timer <= 0 then
  rotate_flicker = not rotate_flicker
  rotate_flicker_timer = 15
 end
 
 -- add tiles
 
 if mb_left_held and my < 120 and my > 10 then
 	safe_set_tile(mi,mj,_t,rotate)
 end
 
 -- delete tiles
 
 if mb_right_held then 
  safe_set_tile(mi,mj,0,0)
 end
 
 -- change selected tile.
 
 if btnp(❎) then
  group_up()
 end
 
 if btnp(🅾️) then
  group_down()
 end
 
 if _mb_wheel == -1 then
  index_up()
  rotate = 0
 end
 
 if _mb_wheel == 1 then
  index_down()
  rotate = 0
 end
 
 -- rotate tile
 
 if btnp(5,1) then
  rotate += 1
  if (rotate > 3 and not t_rotate_as_id(_t)) rotate = 0
 end
 
 -- ================
 
 -- move the camera
 
 -- ================
 
 if btn(1,1) then -- right
  cx += 8 
  if (cx > tiles_xr-128) cx = tiles_xr-128
 end
 
 if btn(0,1) then -- left
  cx -= 8 
  if (cx < 0) cx = 0
 end

	if btn(2,1) then -- up
	 cy -= 8
	 if (cy < 0) cy = 0
	end

	if btn(3,1) then -- down
	 cy += 8
	 if (cy > tiles_yr - 128 + 24) cy = tiles_yr - 128 + 24
	end

end

function draw_editor_ui()

 camera(0,0)

 rect(0,ui_border,127,127-ui_border,7)

	camera(cx,cy)
	
	 -- draw the general 8x8 regions
 
 local _iline,_jline = 0,ui_border
 
 fillp(▒)
 
 while _jline <= tiles_yr do
 	rect(0,_jline,tiles_xr,_jline,13)
 	_jline += 64
 end
 
 while _iline <= tiles_xr do
 	rect(_iline,ui_border,_iline,tiles_yr + ui_border,13)
 	_iline += 64
 end

	-- draw tiles inside camera.

 local ci,cj = to_i(cx),to_j(cy + ui_border)
 local ci_end,cj_end = ci + 15,cj + 15
 local _x,_y,_t = to_tile_x(cx),to_tile_y(cy + ui_border)
 local _yo = _y
 local _r,_flip_h,_flip_v
 
 if (ci < 1) ci = 1
 if (cj < 1) cj = 1
 
 if (ci_end > tiles_w) ci_end = tiles_w
 if (cj_end > tiles_h) cj_end = tiles_h
 
 for i = ci,ci_end do 
  for j = cj,cj_end do
  	
  	-- get tile + rotation
  	
  	pal()
  	_r = tiles_rot[i][j]
  	_t = tiles[i][j]
  	if _t != 0 then 
  		_flip_h = _r % 2 == 1
  		_flip_v = _r >= 2
  		
	  	-- draw gems + doors pal swap
	  	
	  	if (_t == 56 or _t == 97) and _r > 0 then
			 	gem_pal(_r)
			 	_flip_h = false 
			  _flip_v = false
			 end
	  		
	  	-- draw the tile	
	  	
	  	spr(_t,_x,_y,1,1,_flip_h,_flip_v)
	  	
	  	-- draw tile meta data
	  	
	  	if rotate_flicker then
		  		pal(11,0)
		  		
		  		if t_rotate_as_id(_t) then
		  		 				print_outlined(_r,_x + 6,_y + 6,7,0)
		  		else	spr(231 + _r,_x,_y) end
		  		
		  		pal()
	  	end
  	end
  	_y += 8
  end
  _x += 8
  _y = _yo
 end
 
	-- map boundary border!

 fillp()
 rect(0,ui_border,tiles_xr - 1,tiles_yr+ui_border,2)
 
 -- ---------------------------
 
 -- draw selected tile on mouse
 
 -- ---------------------------
 
 camera(0,0)
 
 _flip_h = rotate % 2 == 1
 _flip_v = rotate >= 2
 
 local _tx,_ty = to_tile_x(mx),to_tile_y(my)
 local _t = get_selected()
 local _nr = t_not_rotatable(_t)
 if _nr then 
  _flip_h = false 
  _flip_v = false
 end
 
 -- ================
 
 -- unique tile info
 
 -- ================
 pal()
 
 if (_t == 56 or _t == 97) and rotate > 0 then
 	gem_pal(rotate)
 	_flip_h = false 
  _flip_v = false
 end
 
 -- draw the tile.

 spr(_t,_tx,_ty,1,1,_flip_h,_flip_v)

	-- print tile meta info.

 pal(11,0)
 
 if not t_rotate_as_id(_t) then
 	spr(231 + rotate,_tx,_ty)
 else
 	print_outlined(rotate,_tx+8,_ty+4,7,0)
 end
 
 pal()
 
 -- tile info support text.
 --[[
 if (_flip_h) print("h",_tx,_ty + 9,7)
 if (_flip_v) print("v",_tx + 4,_ty + 9,7)
 --]]
 
 -- ------------------
 -- draw grouped tiles
 -- ------------------
 
 fillp()
 rectfill(0,127-ui_border+1,127,127,0)
 rectfill(0,0,127,ui_border-1,0)
 
 local _g = get_group()
 local _x = 0
 
 local _index = scroll_index
 local _lower = _index - 8
 local _upper = _index + 8
	if (_upper > #_g) _upper = #_g 
 if (#_g < 16) _lower = 1 _upper = #_g
 
	-- draw / mouse handler
 
 function draw_selectables(l,u)
  local _mouse_on
  for k = l,u do
  	
 	 _mouse_on = mouse_in_rect(_x,120,_x+7,127)

  	spr(_g[k],_x,120)
  	
  	-- selection boxes + pick this item
  	
  	if (k == selected_index) rect(_x,120,_x+7,127,8)
  	if (_mouse_on) rect(_x,120,_x+7,127,7)
  	if (_mouse_on and mb_left) selected_index = k
  	
  	_x += 8
  	
 	end
 end
 
 -- lower wrapping
 if _lower < 1 then
 	draw_selectables(#_g+_lower,#_g)
 	_lower = 1
 end
 
 -- middle section.
	draw_selectables(_lower,_upper)

 
 -- upper wrapping
 if _upper == #_g and #_g > 16 then
   	draw_selectables(1,8)
 end
 
 -- text info
 
	print_outlined(mi,105,112,12,0)
	print_outlined(mj,119,112,11,0) 
	
end

function print_outlined(t,x,y,c,s)
 print(t,x-1,y,s)
 print(t,x+1,y,s)
 print(t,x,y-1,s)
 print(t,x,y+1,s)
 print(t,x,y,c)
end

function print_shadow(t,x,y,c,s)
 print(t,x,y+1,s)
 print(t,x,y,c)
end
-->8
-- mouse and menu buttons ❎

buttons = {}
temp_buttons = {}

function update_input()
	 
 mb_any = stat(34)
 local _l = mb_any == 1
 local _r = mb_any == 2

 if (mb_left_held and not _l) mb_left_held = false 
 if (mb_right_held and not _r) mb_right_held = false

	mb_left = _l and not mb_left_held
	mb_right = _r and not mb_right_held

	mb_left_held = _l
	mb_right_held = _r

end

function button(x,y,on_use,img)
	local _b = {
 	x=x,y=y,on_use=on_use,img=img,
 	dropdown=false,
 	on=false,
 	width=8,
 	height=8,
 	text=nil
 }
 add(buttons, _b)
 return _b
end

----------------------

-- button on use funcs

----------------------

-- map settings 

function button_map_i_inc(b)
 if (tiles_w < 128) tiles_w += 8 tiles_xr = tiles_w * 8
end

function button_map_i_dec(b)
 if (tiles_w > 16) tiles_w -= 8 tiles_xr = tiles_w * 8
end

function button_map_j_inc(b)
 if (tiles_h < 128) tiles_h += 8 tiles_yr = tiles_h * 8
end

function button_map_j_dec(b)
 if (tiles_h > 16) tiles_h -= 8 tiles_yr = tiles_h * 8
end

-- load maps

function lazy_load(id)

 return function() 
 
 	-- load in the new map
 	save_maps()
 	selected_map_id = id
 	load_map(id) 
 	all_btn_off(nil)
 	
 	-- reset editor, prevent tile placement first frame
 	menu_dropdown = false
 	editor_enabled = true
 	mb_left_held = false 
 end
end

-- control

function button_save(b)
 save_maps()
end

function button_test(b)

end

function button_set_level(b)
	all_btn_off(b)
 b.on = not b.on
	editor_enabled = not b.on
		menu_dropdown = b.on
	menu_selected = 1
	
	if b.on then
		local _y = ui_border + 2
		for i = 1,10 do 
		 local _nb = button(2,_y,lazy_load(i),selected_map_id == i and 247 or 248)
			_nb.text = "level ".. i
			_nb.width = dd_width - 3
			_y += 8
			add(temp_buttons,_nb)
	 end
	end
	
end

function button_preferences(b)
 all_btn_off(b)
 b.on = not b.on
	editor_enabled = not b.on
	menu_dropdown = b.on
	menu_selected = 0
	
	if b.on then
		
		_y = ui_border + 10
		-- map width + height
	 add(temp_buttons,button(2,_y,button_map_i_dec,253))
		add(temp_buttons,button(10,_y,button_map_i_inc,254))
		
		_y += 16
		
		add(temp_buttons,button(2,_y,button_map_j_dec,253))
		add(temp_buttons,button(10,_y,button_map_j_inc,254))
		
		
	end
end

function all_btn_off(me)

	-- clear out temp buttons.
	for b in all (temp_buttons) do del(buttons,b)	end
	temp_buttons = {}
	
	-- turn all buttons of -me
 for b in all(buttons) do if (b != me) b.on = false end

end

-- ============================

-- 				update all buttons

-- ============================

function update_buttons()

	-- hotkeys
	
	if btn(4,1) then
		delete_timer -= 1
		if delete_timer <= 0 then
			delete_map()
			delete_timer = delete_timer_max
	 end
	else
	 delete_timer = delete_timer_max
	end

	-- mouse ui 

 for b in all(buttons) do
  b.dropdown = mouse_in_rect(b.x,b.y,b.x+b.width-1,b.y+b.height-1)
 
 	if mb_left and b.dropdown then
 		
 		b.on_use(b)
 		b.dropdown = false
 	end
 
 end
end

-- ============================

-- 					draw all buttons

-- ============================

function draw_buttons()
 for b in all(buttons) do

  if (b.dropdown) rectfill(b.x,b.y,b.x+b.width-1,b.y+b.height-1,1)
 	if (b.on) rectfill(b.x,b.y,b.x+b.width-1,b.y+b.height-1,3)
  spr(b.img,b.x,b.y)
  if (b.text != nil) print_shadow(b.text,b.x+10,b.y+1,6,1)
 
 end
end


------------------------
-- drop down hover menus
-------------------------

menu_dropdown = false
menu_selected = 0

-- 0 = preferences
-- 1 = selected level to edit

dd_width = 48

function update_dropdown()
 if mb_left and mx > dd_width then
  all_btn_off(nil)
  menu_dropdown = false
 end
end

function draw_dropdown()
	rectfill(0,ui_border,dd_width,127-ui_border,0)
	rect(0,ui_border,dd_width,127-ui_border,7)

	local _y = ui_border + 3

	if menu_selected == 0 then
	 print_shadow("map width",7,_y,6,1)
	 print_shadow(tiles_w,32,_y+8,15,2)
	 print_shadow("map height",5,_y + 16,6,1)
	 print_shadow(tiles_h,32,_y+24,15,2)
	end

end
-->8
-- editor tilesets.

tile_group_names = {
	"utility",
	"pickups",
	"tiles - normal",
	"tiles - special",
	"tiles - bg",
	"tiles - factory",
	"dangers!"
}

tile_groups = {
	{1,2,3,7,5,6,59,60,61,62,63},
	{48,49,50,51,52,53,54,55,56},
	{96,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,105,106,107,108,109,99,92,93,9,10,11,12,13,14,15},
	{95,114,4,112,97,100,101,102,83,89,86,87,88},
	{115,116,117,118,119,120,121,122,123,124,125,126,127,172,173,174},
	{16,17,18,19,20,21,22,23,24,25,26,27,28},
	{29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45}
}

-- place tiles only if valid i,j

function not_ij_safe(i,j)
  return (i < 1 or j < 1 or i > tiles_w or j > tiles_h)
end

function safe_set_tile(i,j,v,r)
 if (not_ij_safe(i,j)) return
	tiles[i][j] = v
	if (t_not_rotatable(v)) r = 0
	tiles_rot[i][j] = r
end


-- tile selection methods.

function index_up()
	
 selected_index += 1
 scroll_index = selected_index
 if (selected_index > #tile_groups[selected_group]) selected_index = 1
end

function index_down()
 selected_index -= 1
 scroll_index = selected_index
 if (selected_index < 1)  selected_index = #tile_groups[selected_group]
end

function group_up()
 selected_group += 1
 selected_index = 1
 scroll_index = 1
 if (selected_group > #tile_groups) selected_group = 1
end

function group_down()
 selected_group -= 1
 selected_index = 1
 if (selected_group < 1) selected_group = #tile_groups
end

function get_selected()
 return get_group()[selected_index]
end

function get_group()
 return tile_groups[selected_group]
end

-- helpers for tilemap.

function to_i(v)
 return 1 + flr(v / 8)
end

function to_j(v)
	return 1 + flr((v-ui_border) / 8)
end

function to_x(i)
 return (i-1) * 8
end

function to_y(j)
 return ((j-1) * 8) + ui_border
end

function to_tile_x(v)
 return to_x(to_i(v))
end

function to_tile_y(v)
 return to_y(to_j(v))
end

function mouse_in_rect(x,y,xr,yr)
 return not (mx < x or mx > xr) and not (my < y or my > yr)
end

function in_range(t,l,u)
 return (t >= l and t <= u)
end

function or_many(t,tiles)
	for k,tile in pairs(tiles) do
	 if (tile == t) return true
	end return false
end 

function t_not_rotatable(t)
 return in_range(t,48,60)
end

function t_h_only(t)
end

function t_v_only(t)
end

-- for tiles that use rotation index
-- as meta data / id

function t_rotate_as_id(t)
 return or_many(t,{61,62,63,5})
end

-->8
-- init,update,draw

mx,my = 0,0
mi,mj = 1,1

ui_i_x = 0
ui_j_x = 0

function _init()

	-- check if data is empty
	
	if (data != nil) load_map(1)

	-- load in the saved map.

 poke(0x5f2d, 1)
 
 -------------------------
 -- set up menu buttons.
 -------------------------
 
 button(0,0,button_preferences,251)
 button(120,0,button_save,255)
 --button(24,0,button_test,239)
 button(8,0,button_set_level,249)
	

end

function _update()

 mx,my = stat(32),stat(33)
 mi,mj = to_i(mx + cx),to_j(my + cy)
	
	update_input()
	update_buttons()
 if (editor_enabled) update_editor()
 if (menu_dropdown) update_dropdown()
end


function _draw()
 cls()
 draw_editor_ui()
 if (menu_dropdown) draw_dropdown()
 draw_buttons()
 
 pset(mx,my,8)
 --print(#data[selected_map_id] .. " bytes",2,ui_border+2,2)
 
 if btn(4,1) then
 	print("deleting!",0,14,13)
  print("deleting!",0 + (127 * (delete_timer/delete_timer_max)),14,8)
 end
 	
end
__gfx__
0000000002eeee20cccccccc999940002dddddddcccccccc88888888d677776d1888eee103313310055544403133133033133133011110000555444013311133
000000002eeeeee0cccc7ccc9aa99400d6666666c7777c7c87887878666666668888e7ee3bb5bb500545454244bb4bb33b3bb3bb133b3110051544403bb313bb
00000000efeefee2cccc77cc4999994026666666cccccc7c88888878628211168888ee7ebbb3bb510555454444bb3bbbbb3bb4bb3bb303b1055542403bb133b3
00000000efeefee6c777777c2499999412222222c7777ccc8788787868f8d1168888eeee3bb3bb351555444403bb3bb3bb3bb33b3bb3b330015544403bb3b33b
00000000eeeeeee211116611d249999900222222ccc7cc7c22626222d888d11d222288880bb335355555454003033bb03b5bb4b33bb3bb30015542203b31b3bb
00000000de2dee6611116111d622222400000099cccccccc22626262d282111d28228888000330005545444000033000b33bb4333b30bb3015114222133bbb33
00000000d22dd666111111110ddddddd000000000001d00022222222dddddddd228288880000000005454440000000005b354330030b331015124242001bb000
00000000022dd66100011000000000000000000001dd6610000220001d6666d11222888100000000055544400000000005554440000000001552124200000000
88ff88ff88ff88ff88888820122288ff88ff22211111111101010101666101010101010121212121eeeeffffeeeeeeeeeeeeeeee00070000028aa820001ccc10
8fff8fff8fff8fff8888888212128fff8fff212122222222101010106067767066d6d61212121212effef77feffffffeefeeeefe00b00330289aa98201ccc110
fff8fff8fff8fff88888f8881212fff8fff8212121111112010101016661016166d6d62221212121effef77feffffffeeeeeeeee0bb7063389a77a9801cc1100
ff88ff88ff88ff8888888f881212ff88ff88212122222222101010101d10106066d6d61212121212eeeeffffeffffffeeeeeeeee0ab10013aa7777aa01ccc110
112211222222222222288888121288ff88ff212188ff88ff010101010d01016101010101212121212222eeeeeffffffeeeeeeeee0ab361d3aa7777aa011ccc10
12221222211111121122888812128fff8fff21218fff8fff1010101016101ddd206d6d66121212122ee2effeeffffffeeeeeeeee0bbb101389a77a980011cc10
2221222122222222221288881212fff8fff82121fff8fff8010101010d666d0d226d6d66212121212ee2effeeffffffeefeeeefe13bbb331289aa982011ccc10
2211221111111111121288881222ff88ff882221ff88ff881010101010101ddd206d6d66121212122222eeeeeeeeeeeeeeeeeeee11333311028aa82001ccc100
00000000003bb3000000dd6d00c77c00011061dd170710000bbbbba06d00001d0c00cc007cc33cc7600d60d60066770000200e00066666600000000000000000
1101111000b82b0000666dd61c7777c10cc1767d71017490b177177bd666676100cc77707c133c17d6266d600d0000600002e000116661110000000000000000
c111ccc1063283603bb366d61cc77cc1c7cc767d09992229a1161773655555760ccc7c70317331730dd77d206001100707eee000171617110000000000000000
cc1ccccc06133160b82b66d601cccc10777c767d9aaa2424b111117b65f5f566c777777c333333336671076160cc770707e7e0e0171617110000000000000000
ccccc1cc0d6666d03283dd1d7666777d777c6161aaaaa4243772211365f5f566c7c7cccc14999f911d6016dd60011006eee7e00e6116111d0000000000000000
1ccc111c01dddd101331dd1d01dddd10c7cc6161a292a242367176336555556d0777ccc0bbb4994b02166110607cc70688eeeeee6666666d0000000000000000
011110111d1111d100ddd1d1166677710cc161619aaa992933737733d66666d100cccc0cbbbb44bb0d1dd2d1d001100d88eeeeeed16161dd0000000000000000
0000000011dddd110000111111dddd110110d0110999999003333330001111100c0cc0001b1b0b1bd10d100d1077cc010f0f02020d1d1dd00000000000000000
0028e800a004909a40f77f00013b33100882000000a7a0000000080002eeee2007777700000000000000000008888880011111103b7777b3dcc00ccd28800882
000120000a4949a908e777f013333b312888000009aaa77000008e062eeeeee078eee87000000000000000008882222810000001b777777b777077cca8a0aaa8
00d4460009a99a9002877f703b33333988a824007699aee0c1c88880eefefee27eeeee8700000000000000008288000810000001b77dd77bc700707ca8a0a0a8
065494700a9929200d4ff7f0333b331228a8a8429777eff8c8c88888efeeefe67eed1ee7000000000000000080288008100000010ddd777007007070aaa0aaa0
00d54600022e2ee00d6dff6091331998448a8a88477ef824c1c2888288ee88e27881d887000000000000000080028808100dd001000666d00600606099909900
0d5454600222eee0016df41029aa988344488a88942f824900006188de2dee66788888870000000000000000800028881022220133011133d600606d92909092
001d6d000122ee200001d000128992312444448249422494000d0288d22dd66672d66d270000000000000000288888821dddddd133366333666066dd92909292
000000000011221000dd6600033a3310024444200494900000000000022dd6610777777000000000000000000222222022222222133113311dd00dd112200221
dddddddd7777777777dddddd077777777777777777dddd77077777770777777007777770dddddddddddddddddddd666d77777d77d777777d77d77777d7d7777d
dddddddd7777777777dddddd777777777777777777dddd77777777777777777777777777dddddddddd66ddddddd666667777d777d777777d777dd7777ddd77dd
dddddddddddddddd77dddddd777ddddddddddddd77dddd77777ddddd777dd777777dd777ddddddddd6666dddddd66666d777dddddd7777dddddddddddddddddd
dddddddddddddddd77dddddd77dddddddddddddd77dddd7777dddddd77dddd7777dddd77ddddddddd6666dddddd66666ddddd77dddd777dddddddddddddddddd
dddddddddddddddd77dddddd77dddddddddddddd77dddd7777dddddd77dddd7777dddd77dddddddddd66dddd66dd666dddddddddd7dddddddddddddddddddddd
dddddddddddddddd77dddddd77dddddddddddddd77dddd77777ddddd77dddd77777dd777ddddddddddddd66d666dd66ddddddddddddddddddddddddddddddddd
dddddddddddddddd77dddddd77dddddd7777777777dddd777777777777dddd77777777777dddddddddddd66dd66ddddddddddddddddddddddddddddddddddddd
dddddddddddddddd77dddddd77dddddd7777777777dddd770777777777dddd770777777077dddddddddddddddddddddddddddddddddddddddddddddddddddddd
444444444200002444ff4422004994000049940000099000d666d6dd0111111000000000000b3000000b300007000776b13171b17171b171d66ddd6d11111111
4f4444f44444444424ff44210049940000499400009aa9006f6d6d222222222201111110000b3133b30b300077707777d317d717131713176666dddd18888881
44444444ffffffff04ff44200049940000499400009aa900f6d6d22eeee7eee722202220000b33b33b0b30007773677d1d1d3d3dd13d313d66666ddd18111111
44444444ffffffff04ff44200049940000499400009aa90066d6d2e22272227211011101bb1b3b3301bb330bd77aa3d0dddd3dddddd3ddddd6666d6618888881
222222224444444404ff4420004994000024420000499400dd1d12e22f222f2210111011b3bb33310bb3b3310d3aa670ddddddddddddddddd6ddd66618888881
222222224444444404ff4420004994000024420000499400dd1d122efeeefeee02220222bb3b31000bbb3d1306763777ddddddddddddddddddd6666611111181
242222422222222224ff44210049940000244200004994001dd1d12222222222011111103bbb3000d3bbd6d177771677ddddddddddddddddddd666dd18888881
222222222100001244ff442200499400000220000049940011dd1d110111111000000000003b30003d3d6ddd677b3d70dddddddddddddddddddddddd11111111
2ffffff20881188008811880666677770ff400f467777776066d066d0000000000000000c000000cc000000c7777777700770777c000000c0000000000000000
4ffffff428e22e8228888882676677674fff4fff77777c77d666d6660000000000000000c000000cc000000c0000000007000000c00000000000000000000000
44ffff448e8228e88610d6d866667777fff7f4f477c777c75ddd5ddd0000000000000000c000000cc000000c0000000070000000c00000000000000000000000
444ff444288228822d006d62666d67774ffff404777c7777222222220000000000000000c000000cc000000c0000000070000000c00000000000000000000000
44422444088118800d10d6d0ddd1d66604ff05ffcccc1ccc111111110000000000000000c000000cc000000c0000000000000000c00000000000000000000000
4422224428e22e8228222282dddd6666505054ffc1ccc1cc111111110000000000000000c000000cc000000c0000000070000000c00000000000000000000000
422222248e8228e822888822d1dd66d605f50f45cc1ccccc2222222200000000000000001c0000c1c000000c00000000c00000001c0000000000000000000000
122222212882288212222221dddd6666005050001cccccc1dd10dd10000000000000000011cccc11c000000cccccccccc000000c11cccccc0000000000000000
000000071dddddd11dddddd000000001111111110111111000000000110000110011110000000000000000000000000001111110111111110000000000011000
00000077d666777dd666777d00000011111111110011110010000001111001110011110000011100000000000000000001000010100000010000011000111100
000007771dddddd11dddddd100000111111111110011110011111111011011101111101100111100000000000000000010100101101101010000011001111110
0000777d122222210011220000001111111111110011110011111111000111001111111100111100000000000000000001100110100000010000011001111110
000777dd211111120000000000011111111111110011110011111111001110001111111101111100011000000000000001111110100000010111111000101000
00777ddd111111110000000000111111111111110011110011111111011101101101111111111110111101100000000001000010111111110100011000001000
0777dddd111111110000000001111111111111110011110010000001111001110011110011111111111111110111000010100101000110000110011000001000
777ddddd111111110000000011111111111111110111111000000000110000110011110011111111111111111111101001100110011111100111111001111110
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b30e00000000000000b000b00000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003be000000000b00b000303000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b30000000b3b00300030300000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103b0030b0003003031013000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013100130030313101310131100000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000bbb00000000000000000000000000000000000000000000003000
000000000000000000000000000000000000000000000000000000000000000000bbb000000b7b00000bbb00000000000000000000000000000000000003b300
00000000000000000000000000000000000000000000000000000000000000000bb7b000000b7b00000b7bb0000000000000000000000000000000000333bb30
0000000000000000000000000000000000000000000000000000000000000000bb77bbbb0bbb7bbbbbbb77bb000000000000000000000000000000003bbbbbb3
0000000000000000000000000000000000000000000000000000000000000000b777777b0b77777bb777777b0000000000000000000000000000000013333331
0000000000000000000000000000000000000000000000000000000000000000bb77bbbb0bb777bbbbbb77bb0000000000000000000000000000000001113310
00000000000000000000000000000000000000000000000000000000000000000bb7b00000bb7bb0000b7bb00000000000000000000000000000000000013100
000000000000000000000000000000000000000000000000000000000000000000bbb000000bbb00000bbb000000000000000000000000000000000000001000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000003bb3000000000000007070000d60000ddd66600880088001111110011771100c676700
0000000000000000000000000000000000000000000000000000000003bbbb3000d66d000770707000dd6600001111100888088001111110011771100c7676c0
000000000000000000000000000000000000000000000000000000000bbbbbb000666600077077700ddd66600ddd66600288820007777770077777700cccccc0
000000000000000000000000000000000000000000000000000000000333333000dddd00066066600dd116600011111000288800077777700777777001111110
0000000000000000000000000000000000000000000000000000000001333310001dd100066006000d1001600ddd666008828880011111100117711001dddd10
00000000000000000000000000000000000000000000000000000000001331000000000006660000010000100011111008802880011111100117711001dddd10
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ddd666000007070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c676700
0011111007707070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c7676c0
0ddd666007707770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccc0
00111110066066600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110
0ddd6660066006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001dddd10
00111110066600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001dddd10
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
200000000000000000000000000000000ee00ee00000000000000000000000000ee00ee000000000000000000000080000000000000000000000000000000007
200000000000000000000000000000000eeeeee0000000000000000000000000deeeeee000000000000000000000880600000000000000000000000000000007
200000000000000000000000000000000eeeeee00000000000000000000000000eeeeee00000000000000000c1c8888000000000000000000000000000000007
20000000000000000000000000000000072e27e0000000000000000000000000d72e28e00000000000000000c8c8888000000000000000000000000000000007
20000000000000000000000000000000072e27e0000000000000000000000000072e27e00000000000000000c1c8888200000000000000000000000000000007
20000000000000000000000000000000eeeeeeee000000000000000000000000eeeeeeee00000000000000000001c02200000000000000000000000000000007
20000000000000000000000000000000eee2eee0000000000000000000000000eee2eee00000000000000000000c100200000000000000000000000000000007
200000000000000000000000000000000e2e2eee000000000000000000000000de2e2eee00000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
2000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000007
277777777777777777777777777777777777777777d7777777777777777777777777777000000000000000001999999100000000000000000000000000000007
2777777777777777777777777777777777777777777dd77777777777777777777707777700000000000000004999979400000000000000000000000000000007
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd70dd77700000000000000004499994400000000000000000000000000000007
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd70ddd7700000000000000004449944400000000000000000000000000000007
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd777ddd7700000000000000004442244400000000000000000000000000000007
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd000dd7700000000000000004422224400000000000000000000000000000007
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd7700000000000000004222222400000000000000000000000000000007
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd7700000000000000001222222100000000000000000000000000000007
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd77dddd660d0d0d0d0d0d0d0d0111111d0d0d0d0d0d0d0d0d0777777777777777
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd70ddd6600000000000000000011110000000000000000007777777777777777
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd70ddd660000000000000000001111000000000000000000777ddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd70ddd66000000000000000000111100000000000000000077dddddddddddddd
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd777ddd66000000000000000000111100000000000000000077dddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd000dd66000000000000000000111100000000000000000077dddddddddddddd
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd66000000000000000000111100000000000000000077dddddddddddddd
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd66000000000000000001111110000000000000000077dddddddddddddd
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd77dddd66000000000000000011111111000000000000000066dddddddddddddd
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddd66ddddd70ddd66100000011000000111111111000000000000000066dddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddd6666dddd70ddd66111111111111111111111111000000000000000066dddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddd6666dddd70ddd66111111111111111111111111000000000000000066dddddddddddddd
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddd66dddd777ddd66111111111111111111111111000000000000000066dddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd66dd000dd66111111111111111111111111000000000000000066dddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd66ddddddd66100000011000000111111111000000000000000066dddddddddddddd
2ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd66000000000000000011111111000000000000000066dddddddddddddd
2ddddddddddddddddddddddddddddddddddddddddddddddd77dddddd777ddddd777ddd770000000000000000000000000000000000000000dddddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddd70dddddd070ddddd070dd770000000000000000000000000000000000000000dddddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddd70ddddd7770ddddd770dd770000000000000000000000000000000000000000dddddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddd70ddddd7000dddddd70dd770000000000000000000000000000000000000000dddddddddddddddd
2ddddddddddddddddddddddddddddddddddddddddddddddd777ddddd777ddddd7770dd770000000000000000000000000000000000000000dddddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddd000ddddd000ddddd000d7770000000000000000000000000000000000000000dddddddddddddddd
2dddddddddddddddddddddddddddddddddddddddddddddddddddddd677777777777777770000000000000000000000000000000000000000dddddddddddddddd
2ddddddddddddddddddddddddddddddddddddddddddddddddddddd6677777777777777700000000000000000000000000000000000000000dddddddddddddddd
2ddddddd77dddddd777ddddd777ddddd777ddddd777ddddd777ddd777771111177711111000000000000000000000000000000000000000066dddddddddddddd
2dddddddd70dddddd070ddddd070ddddd070ddddd070ddddd070dd771070111110701111000000000000000000000000000000000000000066dddddddddddddd
2dddddddd70ddddd7770dddd7770dddd7770dddd7770ddddd770dd771770111117701111000000000000000000000000000000000000000066dddddddddddddd
2dddddddd70ddddd7000dddd7000dddd7000dddd7000dddddd70dd771170111111701111000000000000000000000000000000000000000066dddddddddddddd
2ddddddd777ddddd777ddddd777ddddd777ddddd777ddddd7770dd777770111177701111000000000000000000000000000000000000000066dddddddddddddd
2dddddddd000ddddd000ddddd000ddddd000ddddd000ddddd000d7771000111110001111000000000000000000000000000000000000000066dddddddddddddd
2dddddddddddddd677777777777777777777777777777777777777771111111111111111000000000000000000000000000000000000000066dddddddddddddd
2ddddddddddddd6677777777777777777777777777777777777777701111111111111111000000000000000000000000000000000000000066dddddddddddddd
277ddddd777ddd7700000000000000007771111177711111777111117771111177711111000000000000000000000000000000000000000066dddddddddddddd
2070ddddd070dd7700000000000000000070111110701111107011111070111110701110000000000000000000000000000000000000000066dddddddddddddd
2770ddddd770dd7700000000000000007770111117701111177011111770111117701100000000000000000000000000000000000000000066dddddddddddddd
2000dddddd70dd7700000000000000007000111111701111117011111170111111701000000000000000000000000000000000000000000066dddddddddddddd
277ddddd7770dd7700000000000000007770111177701111777011117770111177700000000000000000000000000000000000000000000066dddddddddddddd
2000ddddd000d77700000000000000000000011110001111100011111000111110000000000000000000000000000000000000000000000066dddddddddddddd
277777777777777700000000000000000000001111111111111111111111111111000000000000000000000000000000000000000000000066ddddd0dddddddd
277777777777777000000000000000000000000111111111111111111111111110000000000000000000000000000000000000000ccc000066dddd0b0ddddddd
200000000000000000000000000000000000000000000000011111100000000000000000000000000000000001111110000000000c0c0006777ddd0b00dddddd
2000000000000000000000000000000000000000000000000011110000000000d0000000000000000000000010000001000000000ccc00666070dd0bbb0ddddd
20000000000000000000000000000000000000000000000000111100000000000000000000000000000000001000000100000000000c06667770dd0b0b0ddddd
2000000000000000000000000000000000000000000000000011110000000000d000000000000000000000001000000100000000000c066d7000dd0bbb0ddddd
2000000000000000000000000000000000000000000000000011110000000000000000000000000000000000100dd00100000000000066dd777dddd000dddddd
2777777777777777777777777777777777777777777777777711117777777777d77777777777777777777777172222717777777777666dddd000dddddddddddd
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888cccccccccccccccc0888888001111110bbb77bbb99977999ccc77ccc0000000000000000000000000000000000000000000000000000000000000000
8eeeeee8cccc7cccc7777c7c8882222810000001bb7777bb99777799cc7777cc0000000000000000000000000000000000000000000000000000000000000000
8eeeeee8cccc77cccccccc7c8288000810000001b777777b97777779c777777c0000000000000000000000000000000000000000000000000000000000000000
872e27e8c777777cc7777ccc8028800810000001bbb77bbb99977999ccc77ccc0000000000000000000000000000000000000000000000000000000000000000
872e27e8111166111116116180028808100dd0013336633344466444111661110000000000000000000000000000000000000000000000000000000000000000
8eeeeee8111161111116116180002888102222013666666346666664166666610000000000000000000000000000000000000000000000000000000000000000
8ee2eee81111111111111111288888821dddddd13366663344666644116666110000000000000000000000000000000000000000000000000000000000000000
88888888000110000001100002222220222222223336633344466444111661110000000000000000000000000000000000000000000000000000000000000000

